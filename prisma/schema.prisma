// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Releted Model
model User {
  userId            String    @id @unique @default(uuid())
  email             String    @unique
  password          String
  role              USER_ROLE @default(CUSTOMER)
  isDeleted         Boolean   @default(false)
  isBlocked         Boolean   @default(false)
  verificationToken String    @default("token will add letter")
  isVerified        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customer          Customer?
  vendor            Vendor?

  @@map("user")
}

model Customer {
  customerId String       @id @unique @default(uuid())
  email      String       @unique
  name       String       @db.VarChar(50)
  image      String?
  address    String
  mobile     Int
  gender     USER_GENDER?
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [userId])
  followers  Follower[]
  orders     Order[]

  @@map("customer")
}

model Vendor {
  vendorId String       @id @unique @default(uuid())
  email    String       @unique
  name     String       @db.VarChar(50)
  image    String?
  address  String
  mobile   Int
  gender   USER_GENDER?
  userId   String       @unique
  user     User         @relation(fields: [userId], references: [userId])
  shop     Shop[]

  @@map("vendor")
}

// Shop & Product Releted Model

model Shop {
  shopId    String      @id @default(uuid())
  name      String      @unique @db.VarChar(50)
  location  String
  images    String[]
  vendorId  String
  vendor    Vendor      @relation(fields: [vendorId], references: [vendorId])
  products  Product[]
  followers Follower[]
  orderitem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("shop")
}

model Product {
  productId   String      @id @default(uuid())
  name        String      @db.VarChar(50)
  price       Float
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [categoryId])
  images      String[]
  description String
  stock       Int
  sizes       Size[]
  shopId      String
  discounts   Int         @default(0)
  shop        Shop        @relation(fields: [shopId], references: [shopId])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      OrderItem[]

  flashSale FlashSale[]

  @@map("product")
}

model FlashSale {
  id        String   @id @default(uuid())
  productId String
  discount  Int
  startAt   DateTime
  endAt     DateTime
  product   Product  @relation(fields: [productId], references: [productId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flash_sale")
}

model Category {
  categoryId String    @id @default(uuid())
  name       String    @unique @db.VarChar(50)
  product    Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("category")
}

//follow table
model Follower {
  id         String   @id @default(uuid())
  shopId     String
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shop       Shop     @relation(fields: [shopId], references: [shopId])
  customer   Customer @relation(fields: [customerId], references: [customerId])

  @@unique([shopId, customerId]) // Ensures a customer can't follow the same shop multiple times
  @@map("follower")
}

//order table

model Order {
  id         String @id @default(uuid())
  customerId String

  customer      Customer       @relation(fields: [customerId], references: [customerId])
  items         OrderItem[] // Relation to order items
  total         Float // Total price before discounts
  discounts     Float // Total discounts applied
  subTotal      Float // Final total after discounts
  status        ORDER_STATUS   @default(PENDING) // Order status: "pending", "onGoing", "delivered"
  paymentStatus PAYMENT_STATUS @default(PENDING) // Payment status
  transactionId String? // AmarPay transaction ID
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  product   Product  @relation(fields: [productId], references: [productId])
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [shopId])
  size      String? // Size of the product (optional)
  quantity  Int
  price     Float // Price of the product at the time of order
  discount  Float // Discount applied to this item
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//payment enum

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  FAILED
}

enum ORDER_STATUS {
  PENDING
  OnGOING
  DELIVERED
}

//All ENUM Model
enum USER_GENDER {
  MALE
  FEMALE
}

enum USER_ROLE {
  CUSTOMER
  ADMIN
  VENDOR
}

// ENUM for Product
enum Size {
  S
  M
  L
  XL
  XXL
}
