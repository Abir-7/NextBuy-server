// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Auth Releted Model
model User {
  userId String @id @default(uuid())@unique
  email String @unique
  password String
  role USER_ROLE @default(CUSTOMER)
  isDeleted Boolean @default(false)
  isBlocked Boolean @default(false)
  verificationToken String @default("token will add letter")
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customer Customer?
  vendor Vendor?
  @@map("user")
}

model Customer {
  customerId String @id @default(uuid()) @unique
  email String @unique 
  name String @db.VarChar(50)
  image String?
  address String
  mobile Int
  gender USER_GENDER?
  userId String @unique
  user User @relation(fields: [userId],references: [userId])
  @@map("customer")
}

model Vendor {
  vendorId String @id @default(uuid()) @unique
  email String @unique 
  name String @db.VarChar(50)
  image String?
  address String
  mobile Int
  gender USER_GENDER?
  userId String @unique
  user User @relation(fields: [userId],references: [userId])
  shop     Shop[]
  @@map("vendor")
}


// Shop & Product Releted Model

model Shop {
  shopId        String    @id  @default(uuid()) 
  name      String    @db.VarChar(50)
  location  String   
  vendorId  String    
  vendor    Vendor   @relation(fields: [vendorId], references: [vendorId])
   products  Product[]
  createdAt DateTime  @default(now()) 
  updatedAt DateTime  @updatedAt    
  @@map("shop")  
}



model Product {
  productId         String   @id @default(uuid()) 
  name              String    @db.VarChar(50)
  price             Float    
  categoryId         String   
  category Category @relation(fields: [categoryId], references: [categoryId])
  images            String[] 
  description       String?  
  stock             Int      
  sizes              Size[]  
  shopId            String  
  shop              Shop     @relation(fields: [shopId], references: [shopId])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt 
  @@map("product")
}

model Category {
  categoryId         String   @id @default(uuid()) 
  name              String    @db.VarChar(50) @unique
  product Product[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt 
  @@map("category")
}


//All ENUM Model
enum USER_GENDER {
  MALE
  FEMALE
}

enum USER_ROLE {
  CUSTOMER
  ADMIN
  VENDOR
}

// ENUM for Product
enum Size {
  S
  M
  L
  XL
  XXL
}